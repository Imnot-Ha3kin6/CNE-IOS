name: Build iOS App
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      run: |
        # Ensure Xcode is properly set up
        sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
        
    - name: Remove Haxe Setup
      run: echo "Skipping Haxe setup - building iOS app without Haxe compilation"
        
    - name: Find Xcode Project
      run: |
        xcodeproj_path=$(find . -name "*.xcodeproj" -type d | head -1)
        
        if [ -z "$xcodeproj_path" ]; then
          echo "ERROR: No .xcodeproj folder found!"
          ls -la
          exit 1
        fi
        
        echo "Found Xcode project: $xcodeproj_path"
        echo "XCODEPROJ_PATH=$xcodeproj_path" >> $GITHUB_ENV
        
    - name: List Project Info
      run: |
        echo "Project information:"
        xcodebuild -project "$XCODEPROJ_PATH" -list
        
    - name: Build iOS App (Skip Haxe)
      timeout-minutes: 30
      run: |
        project_name=$(basename "$XCODEPROJ_PATH" .xcodeproj)
        echo "Building project: $project_name"
        
        # List all available targets and schemes
        echo "Available targets:"
        xcodebuild -project "$XCODEPROJ_PATH" -list
        
        mkdir -p build/archives
        archive_path="build/archives/${project_name}.xcarchive"
        
        # Try to find the main app target (not the Haxe build target)
        main_target=""
        targets=$(xcodebuild -project "$XCODEPROJ_PATH" -list | grep -A 20 "Targets:" | grep -v "Targets:" | grep -v "Build Configurations:" | head -10)
        
        echo "Found targets: $targets"
        
        # Look for the main app target (usually the project name)
        for target in $targets; do
          if [[ "$target" != "Build Haxe" && "$target" != "BuildHaxe" ]]; then
            main_target="$target"
            echo "Selected main target: $main_target"
            break
          fi
        done
        
        if [ -z "$main_target" ]; then
          echo "No suitable target found, using project name as target"
          main_target="$project_name"
        fi
        
        # Build only the main target, explicitly excluding Build Haxe
        xcodebuild archive \
          -project "$XCODEPROJ_PATH" \
          -target "$main_target" \
          -configuration Release \
          -destination "generic/platform=iOS" \
          -archivePath "$archive_path" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          DEVELOPMENT_TEAM="" \
          -allowProvisioningUpdates
        
        echo "ARCHIVE_PATH=$archive_path" >> $GITHUB_ENV
        
        if [ -d "$archive_path" ]; then
          echo "Archive created successfully"
          find "$archive_path" -name "*.app"
        else
          echo "Archive creation failed"
          exit 1
        fi
        
    - name: Create IPA
      run: |
        mkdir -p build/export
        
        app_path=$(find "$ARCHIVE_PATH" -name "*.app" | head -1)
        
        if [ -z "$app_path" ]; then
          echo "No .app found in archive"
          find "$ARCHIVE_PATH" -type f
          exit 1
        fi
        
        echo "Found app: $app_path"
        
        mkdir -p build/export/Payload
        cp -r "$app_path" build/export/Payload/
        
        cd build/export
        zip -r CodenameEngine-unsigned.ipa Payload/
        cd ../..
        
        echo "IPA created successfully"
        ls -la build/export/
        
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: ios-unsigned-ipa
        path: build/export/*.ipa
        if-no-files-found: error