name: Build iOS App

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Haxe
      run: |
        brew install haxe
        
    - name: Setup Haxelib
      run: |
        mkdir -p ~/haxelib
        haxelib setup ~/haxelib
        
    - name: Install Core Libraries
      run: |
        haxelib install lime --quiet
        haxelib install openfl 9.2.2 --quiet
        haxelib run lime setup -y
        
    - name: Install Custom CNE Libraries (Priority Order)
      run: |
        # Install CNE custom versions first to avoid conflicts
        haxelib git flixel https://github.com/CodenameCrew/cne-flixel --quiet
        haxelib git flixel-addons https://github.com/CodenameCrew/cne-flixel-addons --quiet
        haxelib install flixel-ui 2.6.1 --quiet
        
    - name: Install Additional Dependencies
      run: |
        # CNE-specific hscript-improved with custom-classes branch
        echo "Installing hscript-improved..."
        haxelib git hscript-improved https://github.com/CodenameCrew/hscript-improved custom-classes --quiet
        
        # FlxAnimate - CNE version
        echo "Installing flxanimate..."
        haxelib git flxanimate https://github.com/CodenameCrew/cne-flxanimate --quiet
        
        # Core dependencies
        haxelib install format --quiet
        haxelib install markdown --quiet
        haxelib install nape-haxe4 --quiet
        
        # Video library (skip dependencies to avoid conflicts)
        haxelib install hxvlc 1.9.3 --quiet || echo "hxvlc not available, skipping"
        
        # Away3D for 3D features
        haxelib git away3d https://github.com/CodenameCrew/away3d --quiet || echo "away3d not available, skipping"
        
        # CNE HXCPP
        haxelib git hxcpp https://github.com/CodenameCrew/cne-hxcpp --quiet
        
        echo "All dependencies installed"
        
    - name: Setup iOS
      run: |
        haxelib run lime setup ios -y
        
    - name: Create project.xml
      run: |
        cat > project.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <project>
        	<app
        		title="Friday Night Funkin' - Codename Engine" main="funkin.backend.system.Main"
        		file="CodenameEngine" packageName="com.yoshman29.codenameengine"
        		package="com.yoshman29.codenameengine"
        		version="0.1.0-legacy" company="Yoshman29" />

        	<app save-path="YoshiCrafter29/CodenameEngine" save-name="save-default" mod-saves="true" />
        	<haxedef name="REGION" />
        	<app preloader="flixel.system.FlxPreloader" />
        	<set name="SWF_VERSION" value="11.8" />

        	<window width="1280" height="720" background="#000000" hardware="true" vsync="false" />
        	<window if="html5" resizable="true" />
        	<window if="desktop" orientation="landscape" fullscreen="false" resizable="true" vsync="false"/>
        	<window if="mobile" orientation="landscape" fullscreen="true" width="0" height="0" resizable="false"/>

        	<set name="BUILD_DIR" value="export/debug" if="debug" />
        	<set name="BUILD_DIR" value="export/release" unless="debug" />
        	<source name="source" />
        	<assets path='assets/mobile' if='mobile'/>

        	<define name="PRELOAD_ALL" unless="web" />
        	<define name="NO_PRELOAD_ALL" unless="PRELOAD_ALL"/>
        	<library name="assets" preload="true" if="PRELOAD_ALL"/>
        	<library name="assets" preload="false" if="NO_PRELOAD_ALL" />

        	<assets path="assets/" rename="assets" exclude="*.ogg" if="web"/>
        	<assets path="assets/" rename="assets" exclude="*.mp3" unless="web"/>
        	<assets path='mods' rename='mods' embed='false'/>

        	<!-- Build configuration -->
        	<haxedef name="FLX_NO_FOCUS_LOST_SCREEN" />
        	<haxedef name="FLX_NO_DEBUG" unless="debug" />
        	<haxedef name="ALLOW_MULTITHREADING" unless="web || flash" />
        	<haxedef name="MOD_SUPPORT" unless="web"/>
        	
        	<!-- Disable problematic features for iOS build -->
        	<haxedef name="NO_PRECOMPILED_HEADERS" />
        	<haxedef name="HXCPP_SMART_STRINGS" />
        	
        	<!-- Custom macros -->
        	<haxeflag name="--macro" value="funkin.backend.system.macros.NewHaxeWarning.warn()" />
        	<haxeflag name="--macro" value="funkin.backend.system.macros.Macros.initMacros()" />
        	
        	<!-- Compilation flags -->
        	<haxeflag name="-dce" value="no" if="COMPILE_ALL_CLASSES" />
        
        	<!-- App icons -->
        	<icon path="art/icon16.png" size='16'/>
        	<icon path="art/icon32.png" size='32'/>
        	<icon path="art/icon64.png" size='64'/>
        	<icon path="art/iconOG.png" />

        	<!-- Platform defines -->
        	<define name="DISCORD_RPC" if="desktop"/>
        	<define name="GITHUB_API" unless="web || hl"/>
        	<define name="COMPILE_ALL_CLASSES" />
        	<define name="CUSTOM_CLASSES" />
        	<define name="VIDEO_CUTSCENES" if="desktop || android" />

        	<!-- Required libraries -->
        	<haxelib name="flixel" />
        	<haxelib name="flixel-addons" />
        	<haxelib name="flixel-ui" />
        	<haxelib name="format" />
        	<haxelib name="flxanimate" />
        	<haxelib name="hscript-improved" />
        	<haxelib name="markdown" />
        	<haxelib name="nape-haxe4" />
        	<haxelib name="away3d" if="desktop" />
        	<haxelib name="hxvlc" if="desktop" />
        	<haxelib name="hxcpp" />

        	<!-- Platform targets -->
        	<android target-sdk-version="34" />
        	<android min-sdk-version="19" />
        	<ios deployment="12.0" />
        </project>
        EOF
        echo "Created project.xml successfully"
        
    - name: List Installed Libraries
      run: |
        echo "=== Installed libraries ==="
        haxelib list
        
    - name: Check Source Code Structure and Apply Compatibility Fixes
      run: |
        echo "=== Checking source directory structure ==="
        if [ -d "source" ]; then
          echo "Source directory found"
          find source -name "*.hx" -type f | head -10
        else
          echo "ERROR: No source directory found!"
          echo "Available directories:"
          ls -la
          exit 1
        fi
        
        echo "=== Checking for required assets ==="
        if [ -d "assets" ]; then
          echo "Assets directory found"
        else
          echo "WARNING: No assets directory found"
        fi
        
        echo "=== Verifying flxanimate installation ==="
        haxelib list | grep flxanimate || echo "flxanimate not found in haxelib list"
        
        # Verify FlxSymbolAnimation exists
        flxanimate_path=$(haxelib path flxanimate | head -1)
        if [ -f "${flxanimate_path}flxanimate/animate/FlxSymbolAnimation.hx" ]; then
          echo "SUCCESS: FlxSymbolAnimation found in CNE flxanimate"
        else
          echo "WARNING: FlxSymbolAnimation not found at expected location"
          find "$flxanimate_path" -name "*.hx" | grep -i symbol || echo "No symbol-related files found"
        fi
        
        echo "=== Applying compatibility fixes ==="
        
        # Fix HScript.hx issues
        if [ -f "source/funkin/backend/scripting/HScript.hx" ]; then
          echo "Fixing HScript.hx compatibility issues..."
          
          # Create backup
          cp source/funkin/backend/scripting/HScript.hx source/funkin/backend/scripting/HScript.hx.backup
          
          # Fix String.startsWith issue (add null check) - more careful replacement
          sed -i.tmp 's/message\.startsWith(/message != null \&\& message.startsWith(/g' source/funkin/backend/scripting/HScript.hx
          
          # Fix hscript.Error constructor issues
          sed -i.tmp 's/new hscript\.Error(/hscript.Error.ECustom(/g' source/funkin/backend/scripting/HScript.hx
          
          echo "Applied HScript.hx fixes"
        fi
        
        # Fix Main.hx mobile compatibility - MUCH MORE CAREFUL approach
        if [ -f "source/funkin/backend/system/Main.hx" ]; then
          echo "Fixing Main.hx mobile compatibility..."
          
          # Create backup
          cp source/funkin/backend/system/Main.hx source/funkin/backend/system/Main.hx.backup
          
          # Show the problematic line first
          echo "Checking line 176 before fix:"
          sed -n '176p' source/funkin/backend/system/Main.hx || echo "Line 176 not found"
          
          # Instead of blanket replacement, use more targeted fixes
          # Look for specific patterns that might be problematic
          
          # Fix FlxG.mouse access with proper conditional compilation
          # First, let's see what's actually on line 176
          echo "Content around line 176:"
          sed -n '170,180p' source/funkin/backend/system/Main.hx || echo "Lines not found"
          
          # Use a more surgical approach - only fix lines that actually have mouse issues
          # and preserve proper Haxe syntax
          sed -i.tmp 's/FlxG\.mouse\.visible = false;/#if !mobile FlxG.mouse.visible = false; #end/g' source/funkin/backend/system/Main.hx
          sed -i.tmp 's/FlxG\.mouse\.visible = true;/#if !mobile FlxG.mouse.visible = true; #end/g' source/funkin/backend/system/Main.hx
          
          # Fix any remaining mouse references that aren't assignments
          sed -i.tmp 's/if (FlxG\.mouse\./if (#if !mobile FlxG.mouse. #else false #end \&\& /g' source/funkin/backend/system/Main.hx
          
          echo "Applied Main.hx mobile fixes"
          
          # Verify the fix didn't break syntax
          echo "Checking line 176 after fix:"
          sed -n '176p' source/funkin/backend/system/Main.hx || echo "Line 176 not found"
        fi
        
        # Fix Framerate codenameBuildField issues with better syntax preservation
        echo "Fixing Framerate.codenameBuildField issues..."
        
        # Character Editor fixes
        if [ -f "source/funkin/editors/character/CharacterEditor.hx" ]; then
          cp source/funkin/editors/character/CharacterEditor.hx source/funkin/editors/character/CharacterEditor.hx.backup
          
          # More careful replacement that preserves syntax
          sed -i.tmp 's/Framerate\.codenameBuildField/null \/\* Framerate.codenameBuildField removed \*\//g' source/funkin/editors/character/CharacterEditor.hx
          
          echo "Fixed CharacterEditor.hx"
        fi
        
        # Charter fixes with syntax preservation
        if [ -f "source/funkin/editors/charter/Charter.hx" ]; then
          cp source/funkin/editors/charter/Charter.hx source/funkin/editors/charter/Charter.hx.backup
          
          # Replace with null and preserve syntax
          sed -i.tmp 's/Framerate\.codenameBuildField/null \/\* Framerate.codenameBuildField removed \*\//g' source/funkin/editors/charter/Charter.hx
          
          echo "Fixed Charter.hx"
        fi
        
        echo "=== Compatibility fixes applied ==="
        
        # Final syntax check - look for obvious syntax errors
        echo "=== Performing syntax validation ==="
        if [ -f "source/funkin/backend/system/Main.hx" ]; then
          echo "Checking for obvious syntax errors in Main.hx:"
          # Look for double colons, malformed conditionals, etc.
          if grep -n "::" source/funkin/backend/system/Main.hx; then
            echo "WARNING: Found double colons - potential syntax error"
          fi
          if grep -n "#end.*#if" source/funkin/backend/system/Main.hx; then
            echo "WARNING: Found malformed conditional compilation"
          fi
          if grep -n "null.*:" source/funkin/backend/system/Main.hx; then
            echo "WARNING: Found potential null syntax issue"
          fi
        fi
        
    - name: Configure Xcode for Unsigned Build
      run: |
        # Set up Xcode command line tools
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        
    - name: Build iOS (Unsigned)
      timeout-minutes: 30
      run: |
        if [ -f "project.xml" ]; then
          echo "Found project.xml, building unsigned iOS app..."
          project_file="project.xml"
        elif [ -f "Project.xml" ]; then
          echo "Found Project.xml, building unsigned iOS app..."
          project_file="Project.xml"
        else
          echo "No project file found!"
          exit 1
        fi
        
        echo "Starting iOS build..."
        echo "Build started at: $(date)"
        
        # Run the build and capture all output
        if ! haxelib run lime build "$project_file" ios -release -nosign -verbose 2>&1 | tee build_output.log; then
          echo "Build failed at: $(date)"
          echo ""
          echo "=== BUILD FAILURE ANALYSIS ==="
          
          # Show the last 50 lines of build output to see the actual error
          echo "Last 50 lines of build output:"
          tail -50 build_output.log
          
          echo ""
          echo "=== SEARCHING FOR HAXE ERRORS ==="
          
          # Look for the specific syntax error
          if grep -A5 -B5 "Unexpected :" build_output.log; then
            echo "Found 'Unexpected :' syntax error above"
          fi
          
          # Look for file and line number
          if grep -E "\.hx:[0-9]+:" build_output.log; then
            echo "Found Haxe file/line errors above"
          fi
          
          # Look for common Haxe error patterns
          if grep -i "error" build_output.log; then
            echo "Found error messages above"
          fi
          
          if grep -i "characters.*:" build_output.log; then
            echo "Found Haxe compilation errors above"
          fi
          
          echo ""
          echo "=== CHECKING FOR KNOWN ISSUES ==="
          
          # Check if it's still the FlxSymbolAnimation issue
          if grep -q "FlxSymbolAnimation" build_output.log; then
            echo "FlxSymbolAnimation error still present!"
          fi
          
          # Check if it's the Framerate issue
          if grep -q "codenameBuildField" build_output.log; then
            echo "codenameBuildField error still present!"
          fi
          
          # Check if it's the HScript issue
          if grep -q "hscript\.Error" build_output.log; then
            echo "hscript.Error constructor issue still present!"
          fi
          
          # Check if it's a mouse/mobile issue
          if grep -q "FlxG\.mouse" build_output.log; then
            echo "FlxG.mouse mobile compatibility issue still present!"
          fi
          
          echo ""
          echo "=== SHOWING PROBLEMATIC FILE CONTENT ==="
          
          # If it's Main.hx line 176, show that area
          if grep -q "Main\.hx:176" build_output.log; then
            echo "Content around Main.hx line 176:"
            sed -n '170,180p' source/funkin/backend/system/Main.hx 2>/dev/null || echo "Could not read Main.hx"
          fi
          
          exit 1
        fi
        
        echo "Build completed at: $(date)"
        
    - name: Create Unsigned IPA
      run: |
        echo "Creating unsigned IPA..."
        export_path="export/release/ios/build/Release-iphoneos"
        
        if [ ! -d "$export_path" ]; then
          echo "ERROR: Build output directory not found at $export_path"
          echo "Available directories:"
          find export -type d -name "*.app" 2>/dev/null || echo "No .app directories found"
          exit 1
        fi
        
        cd "$export_path"
        
        # Find the .app bundle
        app_bundle=$(find . -name "*.app" | head -1)
        if [ -z "$app_bundle" ]; then
          echo "ERROR: No .app bundle found"
          ls -la
          exit 1
        fi
        
        echo "Found app bundle: $app_bundle"
        
        # Create Payload directory structure
        mkdir -p Payload
        
        # Copy the .app bundle to Payload
        cp -r "$app_bundle" Payload/
        
        # Create the IPA
        zip -r CodenameEngine-unsigned.ipa Payload/
        
        echo "Unsigned IPA created successfully"
        ls -la *.ipa
        
    - name: Upload Unsigned IPA
      uses: actions/upload-artifact@v4
      with:
        name: ios-unsigned-ipa
        path: export/release/ios/build/Release-iphoneos/*.ipa
        if-no-files-found: warn
        
    - name: Upload App Bundle (fallback)
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-bundle
        path: export/release/ios/build/Release-iphoneos/*.app
        if-no-files-found: warn