name: Build iOS App

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Build Tools
      run: |
        echo "Installing required build tools..."
        # Check if make is available
        if ! which make; then
          echo "Installing make and build essentials..."
          # Install Xcode command line tools if not already installed
          xcode-select --install 2>/dev/null || echo "Command line tools already installed"
          
          # Add common build tool paths to environment
          echo "/usr/bin" >> $GITHUB_PATH
          echo "/bin" >> $GITHUB_PATH
          
          # Verify tools are available
          echo "Checking for make..."
          ls -la /usr/bin/make || echo "Make not found in /usr/bin"
          ls -la /bin/make || echo "Make not found in /bin"
          
          # Try installing via brew as fallback
          if command -v brew >/dev/null 2>&1; then
            brew install make || echo "Could not install make via brew"
          fi
        else
          echo "Make is already available at: $(which make)"
        fi
      
    - name: Find Xcode Project
      run: |
        echo "Looking for Xcode project..."
        xcodeproj_path=$(find . -name "*.xcodeproj" -type d | head -1)
        
        if [ -z "$xcodeproj_path" ]; then
          echo "ERROR: No .xcodeproj folder found!"
          echo "Available files and directories:"
          ls -la
          exit 1
        fi
        
        echo "Found Xcode project at: $xcodeproj_path"
        echo "XCODEPROJ_PATH=$xcodeproj_path" >> $GITHUB_ENV
        
        echo "Xcode project contents:"
        ls -la "$xcodeproj_path"
        
        if [ -f "$xcodeproj_path/project.pbxproj" ]; then
          echo "Found project.pbxproj file ✓"
        else
          echo "ERROR: project.pbxproj not found in $xcodeproj_path"
          exit 1
        fi
        
        echo "Extracting available schemes..."
        xcodebuild -project "$xcodeproj_path" -list 2>/dev/null || echo "Could not list schemes"

    - name: Build iOS Archive
      timeout-minutes: 30
      run: |
        echo "Building iOS archive from Xcode project..."
        echo "Build started at: $(date)"
        
        project_name=$(basename "$XCODEPROJ_PATH" .xcodeproj)
        echo "Project name: $project_name"
        
        mkdir -p build/archives
        archive_path="build/archives/${project_name}.xcarchive"
        
        echo "Getting available schemes..."
        # Get the complete list output first
        list_output=$(xcodebuild -project "$XCODEPROJ_PATH" -list 2>/dev/null)
        echo "Full list output:"
        echo "$list_output"
        
        # Extract schemes more carefully
        schemes=$(echo "$list_output" | sed -n '/Schemes:/,/^$/p' | grep -v "Schemes:" | grep -v "^$" | sed 's/^[[:space:]]*//' | grep -v "Build Configurations" | grep -v "If no build configuration")
        echo "Extracted schemes: $schemes"
        
        # Try to find a scheme that matches the project name first
        if echo "$schemes" | grep -q "^$project_name$"; then
          scheme_name="$project_name"
          echo "Using project name scheme: $scheme_name"
        elif [ -n "$schemes" ]; then
          # Get the first scheme that's not "Build" (which seems to be a build phase, not a scheme)
          scheme_name=$(echo "$schemes" | grep -v "^Build$" | head -1 | xargs)
          if [ -z "$scheme_name" ]; then
            scheme_name=$(echo "$schemes" | head -1 | xargs)
          fi
          echo "Using first available scheme: $scheme_name"
        else
          scheme_name="$project_name"
          echo "No schemes found, using project name as scheme: $scheme_name"
        fi
        
        echo "Running xcodebuild archive..."
        echo "Using project: $XCODEPROJ_PATH"
        echo "Using scheme: $scheme_name"
        
        # Verify the scheme exists before building
        if ! xcodebuild -project "$XCODEPROJ_PATH" -list | grep -A 100 "Schemes:" | grep -q "^[[:space:]]*$scheme_name[[:space:]]*$"; then
          echo "ERROR: Scheme '$scheme_name' not found in project"
          echo "Available schemes:"
          xcodebuild -project "$XCODEPROJ_PATH" -list | grep -A 100 "Schemes:"
          exit 1
        fi
        
        if ! xcodebuild archive \
          -project "$XCODEPROJ_PATH" \
          -scheme "$scheme_name" \
          -configuration Release \
          -destination "generic/platform=iOS" \
          -archivePath "$archive_path" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          DEVELOPMENT_TEAM="" \
          -allowProvisioningUpdates \
          -quiet \
          2>&1 | tee build_output.log; then
          
          echo "Archive build failed at: $(date)"
          echo ""
          echo "=== BUILD FAILURE ANALYSIS ==="
          echo "Last 100 lines of build output:"
          tail -100 build_output.log
          
          echo ""
          echo "=== CHECKING FOR COMMON XCODE ISSUES ==="
          
          if grep -q "Could not find scheme\|does not contain a scheme" build_output.log; then
            echo "❌ Scheme not found issue detected"
            echo "Available schemes in project:"
            xcodebuild -project "$XCODEPROJ_PATH" -list || echo "Could not list schemes"
          fi
          
          if grep -q "Code signing is required" build_output.log; then
            echo "❌ Code signing issue detected"
          fi
          
          if grep -q "No such file or directory" build_output.log; then
            echo "❌ Missing file issue detected"
            if grep -q "unable to spawn process.*make" build_output.log; then
              echo "❌ Make command not found - installing build tools..."
              # Try to install make if it's missing
              which make || echo "Make is not available in the system PATH"
            fi
          fi
          
          if grep -q "Build input file cannot be found" build_output.log; then
            echo "❌ Missing build input file detected"
          fi
          
          if grep -q "error:" build_output.log; then
            echo "❌ Compilation errors found:"
            grep "error:" build_output.log | tail -10
          fi
          
          exit 1
        fi
        fi
        
        echo "Archive created successfully at: $archive_path"
        echo "ARCHIVE_PATH=$archive_path" >> $GITHUB_ENV
        
        if [ -d "$archive_path" ]; then
          echo "✓ Archive verification successful"
          echo "Archive contents:"
          find "$archive_path" -name "*.app" | head -5
        else
          echo "ERROR: Archive was not created"
          exit 1
        fi
        
        echo "Archive build completed at: $(date)"

    - name: Create Unsigned IPA
      run: |
        echo "Creating unsigned IPA from archive..."
        
        if [ ! -d "$ARCHIVE_PATH" ]; then
          echo "ERROR: Archive not found at $ARCHIVE_PATH"
          exit 1
        fi
        
        mkdir -p build/export
        
        cat > build/export/ExportOptions.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>development</string>
            <key>compileBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>manual</string>
            <key>stripSwiftSymbols</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        echo "Created ExportOptions.plist"
        
        if ! xcodebuild -exportArchive \
          -archivePath "$ARCHIVE_PATH" \
          -exportPath build/export \
          -exportOptionsPlist build/export/ExportOptions.plist \
          2>&1 | tee export_output.log; then
          
          echo "IPA export failed"
          echo "Export output:"
          cat export_output.log
          
          echo ""
          echo "Trying alternative manual IPA creation..."
          
          app_path=$(find "$ARCHIVE_PATH" -name "*.app" | head -1)
          if [ -n "$app_path" ]; then
            echo "Found app at: $app_path"
            
            mkdir -p build/export/Payload
            
            cp -r "$app_path" build/export/Payload/
            
            cd build/export
            zip -r CodenameEngine-unsigned.ipa Payload/
            cd ../..
            
            echo "Manual IPA created successfully"
          else
            echo "ERROR: No .app found in archive"
            find "$ARCHIVE_PATH" -type d -name "*.app" || echo "No .app directories found"
            exit 1
          fi
        else
          echo "IPA export completed successfully"
        fi
        
        echo "Looking for IPA files..."
        find build/export -name "*.ipa" | head -5

    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: ios-unsigned-ipa
        path: build/export/*.ipa
        if-no-files-found: warn
        
    - name: Upload App Bundle (fallback)
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-bundle
        path: build/export/Payload/*.app
        if-no-files-found: warn